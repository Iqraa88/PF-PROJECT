#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#include <windows.h>
#include <conio.h>
#include <ctype.h>
struct database {
	char f_name[50];
	char l_name[50];
	char address[200];
	char phone_no[20];
	char cnic[15];
	char email[100];
	int day, month, year;
	long int balance_amount;
	long long int account_no;
	int pin, verify_pin;
}customer[200];

int main(){
	long long int min=9999999999999999, max=99999999999999999;
	int i=0,y, choice, login_pin, choose_account, wrong_pin=0;
	static int customer_count=0;
	int options;
	char kk;
	long int withdraw_amount=0;
	char receiver_name[50];
	long long int Raccount_number;
	long int transferamount=0, amount=0, deposit_cash=0, bill=0;
	int choice_ser, r;
	long int  max_bill=5000 , min_bill= 1000;	
	int npin, cpin, npin_verify, jjj=4;
	FILE *fp;
	time_t t;

	printf("\n\n\t\t\t\t\t      WELCOME TO InnovaBank\n");

	printf("\n\n\t\t\t\t\t  How would you like to proceed?\n\n");
	printf("\t\t\t\t\t      1. Create new account\n");
	printf("\t\t\t\t\t      2. Login to your account\n");
	printf("\n\n\t\t\t\t\t        Enter your choice: ");
	scanf("%d", &choice);
	system("cls");
	switch(choice){
		case 1:
			fp=fopen("Database.bin", "a");
			if(fp==NULL){
				printf("\nFile not open/found\n");
				exit(0);
			}
			fflush(stdin);
			printf("\n\n\t\t\t\t\tEnter Your First Name :\t");
			gets(customer[customer_count].f_name);
			fflush(stdin);
			printf("\t\t\t\t\tEnter You Last Name :\t");
			gets(customer[customer_count].l_name);
			fflush(stdin);
			printf("\t\t\t\t\tEnter Your Address :\t");
			gets(customer[customer_count].address);
		fflush(stdin);
do {
    printf("\t\t\t\t\tEnter Your Phone Number (11 digits): ");
    int digit_count = 0;

    for (i = 0; i < 12; i++) {
        if (i == 4) {
            printf("-"); // Display the hyphen
            customer[customer_count].phone_no[i] = '-'; // Insert the hyphen without reading input
        } else {
            customer[customer_count].phone_no[i] = getche(); // Read character
            if (isdigit(customer[customer_count].phone_no[i])) {                           // is digit--> ctype.h
			                digit_count++; // Count valid digits
            } else {
                // If input is not a digit, reset and retry
                printf("\nInvalid input. Please enter digits only.\n");
                break;
            }
        }
    }

    // Ensure the loop is valid only if 11 digits are entered
    if (digit_count == 11) {
        customer[customer_count].phone_no[12] = '\0'; // Null-terminate the string
        break; // Valid phone number entered
    } else {
        printf("\nInvalid phone number. Please enter exactly 11 digits.\n");
    }
} while (1);
fflush(stdin);


			printf("\n\t\t\t\t\tEnter Your CNIC Number (xxxxx-xxxxxxx-x):");
			for(i=0 ; i<15 ; i++){
				if(i==5 || i==13){
					printf("-");
					customer[customer_count].cnic[i]='-';
				}
				else{
					customer[customer_count].cnic[i] = getche();
				}
			}
			fflush(stdin);
			printf("\n\t\t\t\t\tEnter Your Email \t\t\t:");
			gets(customer[customer_count].email);
			printf("\t\t\t\t\tEnter Date of Birth (dd-mm-yyyy) \t:");
			scanf("%d%c%d%c%d",&customer[customer_count].day,&kk,&customer[customer_count].month,&kk,&customer[customer_count].year);
			y = 2024 - customer[customer_count].year;
			if(y<18){
				printf("\n\n\t\t\t\t\tCustomer is under 18! Execute the program again...\n");
				exit(0);
			}
			printf("\t\t\t\t\tEnter The First Deposit Amount \t\t:");
			scanf("%ld",&customer[customer_count].balance_amount);
			printf("\n\n\n\t\t\t\t\tPlease Wait! Automated Account number is being generated!\n\n\n");
		 

            // Seed the random number generator once
            srand(time(NULL));

            // Generate a single random account number
            customer[customer_count].account_no = (long long int)rand() % (max - min + 1) + min;

            // Simulate a delay to mimic the original loop effect
            Sleep(2000); // 2000 milliseconds = 2 seconds

            system("cls");

             // Output the generated account number
           
			printf("\t\t\t\t\tYour Account Number is: %lld\n", customer[customer_count].account_no);
			// fscanf(fp, "%lld", &customer[customer_count].account_no);
			Pin_Check:
			do {
            printf("\t\t\t\t\tEnter your PIN (4-digit number): ");
            scanf("%d", &customer[customer_count].pin);
            printf("\t\t\t\t\tEnter your PIN again to verify: ");
            scanf("%d", &customer[customer_count].verify_pin);

            if (customer[customer_count].pin == customer[customer_count].verify_pin) {
            printf("\n\n\t\t\t\t\tThank you! Your Account has been successfully created.\n\n");
            break; // Exit the loop if PINs match
            } else {
            printf("\n\n\t\t\t\t\tPINs do not match. Please try again.\n\n");
            }
            } while (1);

			
			fwrite(&customer[customer_count], sizeof(struct database), 1, fp);
			
     		customer_count++;
			if(fwrite != 0){
		        printf("\t\t\t\t\tContents to file written successfully!\n");
			}
		    else{
		        printf("\t\t\t\t\tError writing File!\n");
			}
			fclose(fp);
			break;
			
		case 2: 

			fp=fopen("Database.bin", "r");
			if(fp==NULL){
				printf("\nFile not open/found\n");
				exit(0);
			}
			while(fread(&customer[customer_count], sizeof(struct database), 1, fp)){
				printf("\n\n\t\t\t\t\t(%d) %lld", i, customer[customer_count].account_no);
				
				i++;
			}
					printf("\n\n");
			printf("\n\t\t\t\t\tChoose your Account Number: ");
			scanf("%d", &choose_account);
                 if (choose_account < 0 || choose_account > customer_count) {
            printf("\n\n\t\t\t\t\tInvalid account number selected. Exiting...\n");
            exit(0);
        }
            Again_pin:
            wrong_pin = 0; // Reset wrong attempts counter
            while (wrong_pin < 3) {
            printf("\n\t\t\t\t\tEnter your PIN for this account: ");
            scanf("%d", &login_pin);

            if (login_pin == customer[choose_account].pin) {
             printf("\n\n\t\t\t\t\tLogin successful! Proceeding to services...\n");
         goto MyServices;
    } else {
        wrong_pin++;
        printf("\n\t\t\t\t\tIncorrect PIN. Attempts left: %d\n", 3 - wrong_pin);
    }
}

printf("\n\n\t\t\tYOUR ACCOUNT HAS BEEN BLOCKED FOR 24 HOURS! PLEASE VISIT THE BANK TO RE-OPEN OR TRY AGAIN AFTER 24 HOURS.\n");
exit(0);
		
 	}

MyServices:
return 0;	
}




